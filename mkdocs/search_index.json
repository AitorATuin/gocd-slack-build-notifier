{
    "docs": [
        {
            "location": "/", 
            "text": "gocd-slack-build-notifier\n\n\nSlack based GoCD build notifier\n\n\nSetup\n\n\nDownload jar from \nreleases\n \n place it in /plugins/external \n restart Go Server.\n\n\nConfiguration\n\n\nAll configurations are in \nHOCON\n format. Plugin searches for the configuration file in the following order\n\n\n\n\nFile defined by the environment variable \nGO_NOTIFY_CONF\n.\n\n\ngo_notify.conf\n at the user's home directory. Typically it's the \ngo\n user's home directory (\n/var/go\n).\n\n\ngo_notify.conf\n present at the \nCRUISE_SERVER_DIR\n environment variable location.\n\n\n\n\nMinimalistic configuration would be something like\n\n\ngocd.slack {\n  login = \nsomeuser\n\n  password = \nsomepassword\n\n  server-host = \nhttp://localhost:8153/\n\n  api-server-host = \nhttp://localhost:8153/\n\n  webhookUrl = \nhttps://hooks.slack.com/services/....\n\n\n  # optional fields\n  channel = \n#build\n\n  slackDisplayName = \ngocd-slack-bot\n\n  slackUserIconURL = \nhttp://example.com/slack-bot.png\n\n  displayMaterialChanges = true\n  proxy {\n    hostname = \nlocalhost\n\n    port = \n5555\n\n    type = \nsocks\n # acceptable values are http / socks\n  }\n}\n\n\n\n\n\n\nlogin\n - Login for a Go user who is authorized to access the REST API.\n\n\npassword\n - Password for the user specified above. You might want to create a less privileged user for this plugin.\n\n\nserver-host\n - FQDN of the Go Server. All links on the slack channel will be relative to this host.\n\n\napi-server-host\n - This is an optional attribute. Set this field to localhost so server will use this endpoint to get \nPipelineHistory\n and \nPipelineInstance\n  \n\n\nwebhookUrl\n - Slack Webhook URL\n\n\nchannel\n - Override the default channel where we should send the notifications in slack. You can also give a value starting with \n@\n to send it to any specific user.\n\n\ndisplayMaterialChanges\n - Display material changes in the notification (git revisions for example). Defaults to true, set to false if you want to hide.\n\n\nproxy\n - Specify proxy related settings for the plugin.\n\n\nproxy.hostname\n - Proxy Host\n\n\nproxy.port\n - Proxy Port\n\n\nproxy.type\n - \nsocks\n or \nhttp\n are the only accepted values.\n\n\n\n\nPipeline Rules\n\n\nBy default the plugin pushes a note about all failed stages across all pipelines to Slack. You have fine grain control over this operation.\n\n\ngocd.slack {\n  server-host = \nhttp://localhost:8153/\n\n  webhookUrl = \nhttps://hooks.slack.com/services/....\n\n\n  pipelines = [{\n    name = \ngocd-slack-build\n\n    stage = \nbuild\n\n    state = \nfailed|passed\n\n    channel = \n#oss-build-group\n\n    owners = [\nashwanthkumar\n]\n    webhookUrl = \nhttps://hooks.slack.com/services/another-team-hook-id...\n\n  },\n  {\n    name = \n.*\n\n    stage = \n.*\n\n    state = \nfailed\n\n  }]\n}\n\n\n\n\ngocd.slack.pipelines\n contains all the rules for the go-server. It is a list of rules (see below for what the parameters mean) for various pipelines. The plugin will pick the first matching pipeline rule from the pipelines collection above, so your most specific rule should be first, with the most generic rule at the bottom.\n- \nname\n - Regex to match the pipeline name\n- \nstage\n - Regex to match the stage name\n- \nstate\n - State of the pipeline at which we should send a notification. You can provide multiple values separated by pipe (\n|\n) symbol. Valid values are passed, failed, cancelled, building, fixed, broken or all.\n- \nchannel\n - (Optional) channel where we should send the slack notification. This setting for a rule overrides the global setting\n- \nowners\n - (Optional) list of slack user handles who must be tagged in the message upon notifications\n- \nwebhookUrl\n - (Optional) Use this webhook url instead of the global one. Useful if you're using multiple slack teams.\n\n\nScreenshots\n\n\n\n\n\n\nLicense\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0", 
            "title": "Home"
        }, 
        {
            "location": "/#gocd-slack-build-notifier", 
            "text": "Slack based GoCD build notifier", 
            "title": "gocd-slack-build-notifier"
        }, 
        {
            "location": "/#setup", 
            "text": "Download jar from  releases    place it in /plugins/external   restart Go Server.", 
            "title": "Setup"
        }, 
        {
            "location": "/#configuration", 
            "text": "All configurations are in  HOCON  format. Plugin searches for the configuration file in the following order   File defined by the environment variable  GO_NOTIFY_CONF .  go_notify.conf  at the user's home directory. Typically it's the  go  user's home directory ( /var/go ).  go_notify.conf  present at the  CRUISE_SERVER_DIR  environment variable location.   Minimalistic configuration would be something like  gocd.slack {\n  login =  someuser \n  password =  somepassword \n  server-host =  http://localhost:8153/ \n  api-server-host =  http://localhost:8153/ \n  webhookUrl =  https://hooks.slack.com/services/.... \n\n  # optional fields\n  channel =  #build \n  slackDisplayName =  gocd-slack-bot \n  slackUserIconURL =  http://example.com/slack-bot.png \n  displayMaterialChanges = true\n  proxy {\n    hostname =  localhost \n    port =  5555 \n    type =  socks  # acceptable values are http / socks\n  }\n}   login  - Login for a Go user who is authorized to access the REST API.  password  - Password for the user specified above. You might want to create a less privileged user for this plugin.  server-host  - FQDN of the Go Server. All links on the slack channel will be relative to this host.  api-server-host  - This is an optional attribute. Set this field to localhost so server will use this endpoint to get  PipelineHistory  and  PipelineInstance     webhookUrl  - Slack Webhook URL  channel  - Override the default channel where we should send the notifications in slack. You can also give a value starting with  @  to send it to any specific user.  displayMaterialChanges  - Display material changes in the notification (git revisions for example). Defaults to true, set to false if you want to hide.  proxy  - Specify proxy related settings for the plugin.  proxy.hostname  - Proxy Host  proxy.port  - Proxy Port  proxy.type  -  socks  or  http  are the only accepted values.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#pipeline-rules", 
            "text": "By default the plugin pushes a note about all failed stages across all pipelines to Slack. You have fine grain control over this operation.  gocd.slack {\n  server-host =  http://localhost:8153/ \n  webhookUrl =  https://hooks.slack.com/services/.... \n\n  pipelines = [{\n    name =  gocd-slack-build \n    stage =  build \n    state =  failed|passed \n    channel =  #oss-build-group \n    owners = [ ashwanthkumar ]\n    webhookUrl =  https://hooks.slack.com/services/another-team-hook-id... \n  },\n  {\n    name =  .* \n    stage =  .* \n    state =  failed \n  }]\n}  gocd.slack.pipelines  contains all the rules for the go-server. It is a list of rules (see below for what the parameters mean) for various pipelines. The plugin will pick the first matching pipeline rule from the pipelines collection above, so your most specific rule should be first, with the most generic rule at the bottom.\n-  name  - Regex to match the pipeline name\n-  stage  - Regex to match the stage name\n-  state  - State of the pipeline at which we should send a notification. You can provide multiple values separated by pipe ( | ) symbol. Valid values are passed, failed, cancelled, building, fixed, broken or all.\n-  channel  - (Optional) channel where we should send the slack notification. This setting for a rule overrides the global setting\n-  owners  - (Optional) list of slack user handles who must be tagged in the message upon notifications\n-  webhookUrl  - (Optional) Use this webhook url instead of the global one. Useful if you're using multiple slack teams.", 
            "title": "Pipeline Rules"
        }, 
        {
            "location": "/#screenshots", 
            "text": "", 
            "title": "Screenshots"
        }, 
        {
            "location": "/#license", 
            "text": "http://www.apache.org/licenses/LICENSE-2.0", 
            "title": "License"
        }
    ]
}